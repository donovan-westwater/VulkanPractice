#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 0, set = 1) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT HitPayload prd;

void main() 
{
    // split up our rays into directions
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    const uint samplesPerPixel = 10;
    const vec2 deltaOffset = vec2(0.01,0.01);
    vec2 d = inUV * 2.0 - 1.0;
    
    //Set flags to describe the geometry being dealt with
     uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;
    vec3 outColor = vec3(0,0,0);
    //RAY TRACE TIME
    vec2 rng_state = vec2(.5,.5);
    vec4 origin = ubo.view * vec4(0,0,0,1);
    for(uint i = 0; i < samplesPerPixel;i++){
        //Convert into rays with ubo
        //Step 1) randomize ray dir a little bit to smooth out edges and noise
        vec3 offset = 0.5*randomUnitVector(rng_state);
        d.x += offset.x*deltaOffset.x;
        d.y += offset.y*deltaOffset.y;
        //Step 2) Create target and direction. Reset hit payload
        vec4 target = ubo.proj * vec4(d.x,d.y,1,1);
        vec4 direction = ubo.view  * vec4(normalize(target.xyz),0);
         prd.hitValue = vec3(0,0,0);
         prd.rayDepth = 0;
         traceRayEXT(topLevelAS, // acceleration structure
              rayFlags,       // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              origin.xyz,     // ray origin
              tMin,           // ray min range
              direction.xyz,  // ray direction
              tMax,           // ray max range
              0               // payload (location = 0)
        );
        outColor += prd.hitValue/samplesPerPixel;
    }
    outColor = vec3(linear_to_gamma(outColor.x),linear_to_gamma(outColor.y),linear_to_gamma(outColor.z));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(outColor, 1.0));
}
